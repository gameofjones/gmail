{"version":3,"sources":["components/LabelPanel.tsx","App.js","serviceWorker.js","index.js"],"names":["LabelPanel","labels","custom","className","styles","labelPanel","Typography","variant","gutterBottom","map","label","index","key","css","flex","padding","color","mockLabels","mockCustom","App","app","toolbar","TextField","id","panelContainer","emailPanel","previewPanel","height","display","backgroundColor","border","borderLeft","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQA8BeA,EArBwC,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,OAAqB,EAAbC,OAChE,OACE,yBAAKC,UAAWC,EAAOC,YACrB,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,cAAY,GAArC,QAIEP,EAAOQ,KAAI,SAACC,EAAOC,GACjB,OACA,yBAAKC,IAAKD,EAAOR,UAAWC,EAAOM,OACjC,kBAACJ,EAAA,EAAD,CAAYC,QAAQ,YAAYC,cAAY,GACzCE,SAYTN,EAAS,CACbC,WAAYQ,YAAI,CACdC,KAAM,YACNC,QAAS,SACTC,MAAO,YAETN,MAAOG,YAAI,CACTG,MAAO,WACPD,QAAS,WCjCPE,EAAa,CACjB,QAAS,UAAW,YAAa,OAAQ,SAAU,SAG/CC,EAAa,CAAC,YAiBLC,MAff,WACE,OACE,yBAAKhB,UAAWC,EAAOgB,KACrB,yBAAKjB,UAAWC,EAAOiB,SACrB,kBAACC,EAAA,EAAD,CAAWC,GAAG,iBAAiBb,MAAM,YAEvC,yBAAKP,UAAWC,EAAOoB,gBACrB,kBAAC,EAAD,CAAYvB,OAAQgB,EAAYf,OAAQgB,IACxC,yBAAKf,UAAWC,EAAOqB,aACvB,yBAAKtB,UAAWC,EAAOsB,kBAUzBtB,EAAS,CACbgB,IAAKP,YAAI,IAGTQ,QAASR,YAAI,CACXc,OAAQ,OACRC,QAAS,OACT,cAAe,SACfb,QAAS,WACTc,gBAAiB,UACjBC,OAZc,sBAchBN,eAAgBX,YAAI,CAClBc,OAAQ,qBACRC,QAAS,OACTb,QAAS,aAEXU,WAAYZ,YAAI,CACdC,KAAM,UACNe,gBAAiB,UACjBE,WAAY,sBAEdL,aAAcb,YAAI,CAChBC,KAAM,EACNiB,WA1Bc,uBClBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fa1eb59b.chunk.js","sourcesContent":["import React, { FunctionComponent } from \"react\"\nimport { css } from \"emotion\"\nimport Typography from \"@material-ui/core/Typography\"\n\ninterface LabelPanelProps {\n  labels: string[],\n  custom: string[],\n}\n\nconst LabelPanel: FunctionComponent<LabelPanelProps> = ({ labels, custom }) => {\n  return (\n    <div className={styles.labelPanel}>\n      <Typography variant=\"h5\" gutterBottom>\n        Mail\n      </Typography>\n      {\n        labels.map((label, index) => {\n          return (\n          <div key={index} className={styles.label}>\n            <Typography variant=\"subtitle2\" gutterBottom>\n              {label}\n            </Typography>\n          </div>\n          )\n        })\n      }\n    </div>\n  )\n}\n\nexport default LabelPanel\n\nconst styles = {\n  labelPanel: css({\n    flex: \"0 0 200px\",\n    padding: \"20px 0\",\n    color: \"#585858\",\n  }),\n  label: css({\n    color: \"darkgray\",\n    padding: \"5px 0\",\n  })\n}","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport './App.css';\nimport 'typeface-roboto';\nimport { css } from \"emotion\";\nimport LabelPanel from \"./components/LabelPanel\"\n\nconst mockLabels = [\n  \"Inbox\", \"Snoozed\", \"Important\", \"Sent\", \"Drafts\", \"Trash\"\n]\n\nconst mockCustom = [\"Receipts\"]\n\nfunction App() {\n  return (\n    <div className={styles.app}>\n      <div className={styles.toolbar}>\n        <TextField id=\"standard-basic\" label=\"Search\" />\n      </div>\n      <div className={styles.panelContainer}>\n        <LabelPanel labels={mockLabels} custom={mockCustom} />\n        <div className={styles.emailPanel}></div>\n        <div className={styles.previewPanel}></div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\nconst appBorder = \"2px solid #F4F4F4\"\n\nconst styles = {\n  app: css({\n\n  }),\n  toolbar: css({\n    height: \"80px\",\n    display: \"flex\",\n    \"align-items\": \"center\",\n    padding: \"0 30px 0\",\n    backgroundColor: \"#FCFCFA\",\n    border: appBorder,\n  }),\n  panelContainer: css({\n    height: \"calc(100vh - 80px)\",\n    display: \"flex\",\n    padding: \"0 30px 0\",\n  }),\n  emailPanel: css({\n    flex: \"0 400px\",\n    backgroundColor: \"#F9F9F8\",\n    borderLeft: \"1px solid #F4F4F4\"\n  }),\n  previewPanel: css({\n    flex: 1,\n    borderLeft: appBorder,\n  }),\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["components/EmailTab.tsx","components/Label.tsx","components/LabelPanel.tsx","components/Buffer.tsx","components/PreviewPanel.tsx","App.js","serviceWorker.js","index.js"],"names":["EmailTab","index","subject","sender","sent","selected","useState","isSelected","setSelected","className","cx","styles","tab","altBackground","onClick","leftSide","contents","style","flex","Typography","variant","display","gutterBottom","rightSide","css","cursor","backgroundColor","padding","color","whiteSpace","overflow","textOverflow","maxWidth","alignItems","margin","flexDirection","Label","name","children","label","LabelPanel","custom","labelPanel","standardIcon","buffer","map","key","height","paddingTop","Buffer","PreviewPanel","recipients","body","previewPanel","recipient","borderLeft","mockCustom","mockEmails","App","app","fontWeight","letterSpacing","toolbar","Input","id","startAdornment","InputAdornment","position","panelContainer","emailPanel","email","border","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0da3793a.chunk.js","sourcesContent":["import React, { FunctionComponent, useState } from \"react\"\nimport { css, cx } from \"emotion\"\nimport Typography from \"@material-ui/core/Typography\"\nimport AttachFileIcon from \"@material-ui/icons/AttachFile\"\n\ninterface EmailTabProps {\n  index: number\n  subject: string\n  sender: string,\n  sent: string,\n  selected?: boolean,\n}\n\nconst EmailTab: FunctionComponent<EmailTabProps> = ({ index, subject, sender, sent, selected }) => {\n  const [isSelected, setSelected] = useState(selected)\n\n  return (\n    <div\n      className={cx(styles.tab, { [styles.altBackground]: index%2 === 0 })}\n      onClick={() => setSelected(!isSelected)}\n    >\n      <div className={cx(styles.leftSide, { [styles.selected]: isSelected })} />\n      <div className={styles.contents}>\n        <div style={{ flex: 1 }}>\n          <label className={styles.subject}>{subject}</label>\n          <Typography\n            variant=\"caption\"\n            display=\"block\"\n            style={styles.sender}\n            gutterBottom>\n            {sender}\n          </Typography>\n        </div>\n        <div className={styles.rightSide}>\n          <AttachFileIcon />\n          <Typography\n            variant=\"caption\"\n            display=\"block\"\n            style={styles.sender}\n            gutterBottom>\n            {sent}\n          </Typography>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default EmailTab\n\nconst styles = {\n  tab: css({\n    display: \"flex\",\n    cursor: \"pointer\",\n    backgroundColor: \"#F9F9F8\",\n    \":hover\": {\n      backgroundColor: \"#BBDEFB\"\n    },\n  }),\n  altBackground: css({\n    backgroundColor: \"#F1F1F1\",\n  }),\n  contents: css({\n    flex: 1,\n    display: \"flex\",\n    padding: \"20px 20px 10px 20px\",\n    color: \"#585858\",\n  }),\n  subject: css({\n    padding: \"10px\",\n    whiteSpace: \"nowrap\",\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n    maxWidth: \"285px\",\n    display: \"block\",\n    cursor: \"pointer\",\n  }),\n  sender: {\n    padding: \"10px 10px 10px 12px\",\n  },\n  leftSide: css({\n    flex: \"0 3px\",\n  }),\n  rightSide: css({\n    flex: \"0 90px\",\n    alignItems: \"center\",\n    display: \"flex\",\n    margin: \"auto\",\n    flexDirection: \"column\",\n  }),\n  selected: css({\n    backgroundColor: \"#FDD835\",\n  }),\n}\n","import React, { FunctionComponent } from \"react\"\nimport { css, cx } from \"emotion\"\nimport Typography from \"@material-ui/core/Typography\"\n\ninterface LabelProps {\n  name: string\n  selected?: boolean\n}\n\nconst Label: FunctionComponent<LabelProps> = ({ name, children, selected }) => {\n  return (\n    <div className={cx(styles.label, { [styles.selected]: selected })}>\n      {children}\n      <Typography variant=\"subtitle2\" style={{ margin: \"2px auto 0 4px\" }} gutterBottom>\n        {name}\n      </Typography>\n    </div>\n  )\n}\n\nexport default Label\n\nconst styles = {\n  label: css({\n    display: \"flex\",\n    \"align-items\": \"center\",\n    color: \"darkgray\",\n    padding: \"5px 0\",\n    \":hover\": {\n      color: \"#2979FF\",\n      cursor: \"pointer\",\n    }\n  }),\n  selected: css({\n    color: \"#2979FF\",\n  })\n}\n","import React, { FunctionComponent } from \"react\"\nimport { css } from \"emotion\"\nimport Typography from \"@material-ui/core/Typography\"\nimport InboxIcon from \"@material-ui/icons/Inbox\"\nimport SnoozeIcon from \"@material-ui/icons/Snooze\"\nimport LabelImportantIcon from \"@material-ui/icons/LabelImportant\"\nimport StarRateIcon from \"@material-ui/icons/StarRate\"\nimport SendIcon from \"@material-ui/icons/Send\"\nimport DraftsIcon from \"@material-ui/icons/Drafts\"\nimport ReportIcon from \"@material-ui/icons/Report\"\nimport DeleteIcon from \"@material-ui/icons/Delete\"\nimport LensIcon from \"@material-ui/icons/Lens\"\nimport Label from \"./Label\"\n\ninterface LabelPanelProps {\n  custom: string[]\n}\n\nconst LabelPanel: FunctionComponent<LabelPanelProps> = ({ custom }) => {\n  return (\n    <div className={styles.labelPanel}>\n      <Typography variant=\"h5\" gutterBottom>\n        Mail\n      </Typography>\n      <Label name=\"Inbox\" selected><InboxIcon style={styles.standardIcon} /></Label>\n      <Label name=\"Snoozed\"><SnoozeIcon style={styles.standardIcon} /></Label>\n      <Label name=\"Important\"><LabelImportantIcon style={styles.standardIcon} /></Label>\n      <Label name=\"Starred\"><StarRateIcon /></Label>\n      <Label name=\"Sent\"><SendIcon style={styles.standardIcon} /></Label>\n      <Label name=\"Drafts\"><DraftsIcon style={styles.standardIcon} /></Label>\n      <Label name=\"Spam\"><ReportIcon style={styles.standardIcon} /></Label>\n      <Label name=\"Trash\"><DeleteIcon style={styles.standardIcon} /></Label>\n      <div className={styles.buffer} />\n      <Typography variant=\"h5\">\n        Folders\n      </Typography>\n      {\n        custom.map((label, index) => {\n          return (\n            <Label key={index} name={label}>\n              <LensIcon style={{ height: \"10px\", color: \"red\" }} />\n            </Label>\n          )\n        })\n      }\n    </div>\n  )\n}\n\nexport default LabelPanel\n\nconst styles = {\n  labelPanel: css({\n    flex: \"0 0 200px\",\n    padding: \"20px 0\",\n    color: \"#585858\",\n  }),\n  label: css({\n    display: \"flex\",\n    \"align-items\": \"center\",\n    color: \"darkgray\",\n    padding: \"5px 0\",\n  }),\n  standardIcon: {\n    height: \"16px\"\n  },\n  buffer: css({\n    paddingTop: \"10px\",\n  })\n}","import React, { FunctionComponent } from \"react\"\n\ninterface BufferProps {\n  height: number\n}\n\nconst Buffer: FunctionComponent<BufferProps> = ({ height }) => {\n  return <div style={{ paddingTop: `${height}px`}} />\n}\n\nexport default Buffer","import React, { FunctionComponent, useState } from \"react\"\nimport { css, cx } from \"emotion\"\nimport Typography from \"@material-ui/core/Typography\"\nimport Buffer from \"./Buffer\"\n\ninterface PreviewPanelProps {\n  sender: string\n  recipients: string[]\n  subject: string\n  body: string\n}\n\nconst PreviewPanel: FunctionComponent<PreviewPanelProps> = ({\n  sender,\n  recipients,\n  subject,\n  body,\n}) => {\n  return (\n    <div className={styles.previewPanel}>\n      <Typography variant=\"subtitle2\" gutterBottom>{sender}</Typography>\n      <Typography variant=\"subtitle2\" gutterBottom>\n      {\n        recipients.map((recipient, index) => {\n          return (\n            <span key={index}>{recipient};</span>\n          )\n        })\n      }\n      </Typography>\n      <Buffer height={20} />\n      <Typography variant=\"h5\" gutterBottom>{subject}</Typography>\n      <Buffer height={20} />\n      <Typography variant=\"body2\" gutterBottom>\n        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Dolor sit amet consectetur adipiscing elit duis tristique sollicitudin. A diam sollicitudin tempor id eu. Orci nulla pellentesque dignissim enim sit amet venenatis urna cursus. Aliquam nulla facilisi cras fermentum. Fringilla est ullamcorper eget nulla facilisi etiam dignissim diam. Nam libero justo laoreet sit. Et netus et malesuada fames. Pellentesque habitant morbi tristique senectus et netus et malesuada. Massa vitae tortor condimentum lacinia quis vel eros donec. Arcu ac tortor dignissim convallis aenean et tortor at risus. Tempus egestas sed sed risus pretium quam vulputate dignissim suspendisse. Odio tempor orci dapibus ultrices in iaculis nunc. Auctor elit sed vulputate mi sit amet. Varius vel pharetra vel turpis nunc eget lorem. Duis convallis convallis tellus id interdum velit laoreet id donec.</p>\n        <p>Interdum velit euismod in pellentesque massa placerat. Cras ornare arcu dui vivamus. Id velit ut tortor pretium viverra suspendisse potenti nullam. Eget egestas purus viverra accumsan in. A lacus vestibulum sed arcu non. Felis eget velit aliquet sagittis id consectetur purus. Orci eu lobortis elementum nibh tellus molestie. Libero justo laoreet sit amet cursus sit amet dictum. Semper auctor neque vitae tempus quam pellentesque nec. Augue neque gravida in fermentum et sollicitudin ac. Leo duis ut diam quam nulla porttitor massa. In ornare quam viverra orci sagittis. Sodales ut eu sem integer. Ultrices tincidunt arcu non sodales.</p>\n      </Typography>\n    </div>\n  )\n}\n\nexport default PreviewPanel\n\nconst appBorder = \"2px solid #F4F4F4\"\n\nconst styles = {\n  previewPanel: css({\n    flex: 1,\n    borderLeft: appBorder,\n    color: \"#585858\",\n    padding: \"20px 30px\",\n  }),\n}\n","import React from 'react';\nimport Input from '@material-ui/core/Input'\nimport SearchIcon from \"@material-ui/icons/Search\"\nimport InputAdornment from '@material-ui/core/InputAdornment'\nimport Typography from \"@material-ui/core/Typography\"\nimport './App.css';\nimport 'typeface-roboto';\nimport { css } from \"emotion\";\nimport { LabelPanel, EmailTab, PreviewPanel } from \"./components\"\n\nconst mockCustom = [\"Receipts\"]\nconst mockEmails = [\n  {\n    subject: \"First Email\",\n    sender: \"author@gmail.com\",\n    sent: \"8:08 AM\"\n  },\n  {\n    subject: \"Second Email with a longer name ya'llvgvggggggggg\",\n    sender: \"Kiah Jones\",\n    sent: \"Fri 3:20 PM\"\n  },\n  {\n    subject: \"Third Email\",\n    sender: \"Deep Badesha\",\n    sent: \"Fri 3:20 PM\"\n  },\n]\n\nfunction App() {\n  return (\n    <div className={styles.app}>\n      <Typography variant=\"h4\" style={{ fontWeight: \"bold\", letterSpacing: \"2px\", padding: \"15px 15px 15px 30px\", color: \"#2979FF\"}}>\n        G<label style={{ color: \"red\" }}>O</label><label style={{ color: \"#FDD835\" }}>J</label>\n      </Typography>\n      <div className={styles.toolbar}>\n        <Input\n          id=\"standard-adornment-amount\"\n          startAdornment={\n            <InputAdornment position=\"start\">\n              <SearchIcon style={{ color: \"#2979FF\" }}/>\n            </InputAdornment>\n          }\n        />\n      </div>\n      <div className={styles.panelContainer}> \n        <LabelPanel custom={mockCustom} />\n        <div className={styles.emailPanel}>\n          {\n            mockEmails.map((email, index) => \n              <EmailTab\n                index={index}\n                subject={email.subject}\n                sender={email.sender}\n                sent={email.sent}\n              />\n            )\n          }\n        </div>\n        <PreviewPanel\n          sender={\"Kiah Jones\"}\n          recipients={[\"Madhu Rawat\", \"Deep Badesha\"]}\n          subject={\"First Email\"}\n          body={\"\"}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\nconst appBorder = \"2px solid #F4F4F4\"\n\nconst styles = {\n  app: css({\n\n  }),\n  toolbar: css({\n    height: \"80px\",\n    display: \"flex\",\n    \"align-items\": \"center\",\n    padding: \"0 30px 0\",\n    backgroundColor: \"#FCFCFA\",\n    color: \"#2962FF\",\n    border: appBorder,\n  }),\n  panelContainer: css({\n    height: \"calc(100vh - 155px)\",\n    display: \"flex\",\n    padding: \"0 30px 0\",\n  }),\n  emailPanel: css({\n    flex: \"0 400px\",\n    borderLeft: \"1px solid #F4F4F4\",\n  }),\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
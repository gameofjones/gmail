{"version":3,"sources":["components/Label.tsx","components/LabelPanel.tsx","App.js","serviceWorker.js","index.js"],"names":["Label","name","children","selected","className","cx","styles","label","Typography","variant","gutterBottom","css","display","color","padding","LabelPanel","custom","labelPanel","style","standardIcon","buffer","map","index","key","height","flex","paddingTop","mockCustom","App","app","toolbar","TextField","id","panelContainer","emailPanel","previewPanel","backgroundColor","border","borderLeft","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f677ec04.chunk.js","sourcesContent":["import React, { FunctionComponent } from \"react\"\nimport { css, cx } from \"emotion\"\nimport Typography from \"@material-ui/core/Typography\"\n\ninterface LabelProps {\n  name: string,\n  selected?: boolean,\n}\n\nconst Label: FunctionComponent<LabelProps> = ({ name, children, selected }) => {\n  return (\n    <div className={cx(styles.label, { [styles.selected]: selected })}>\n      <Typography variant=\"subtitle2\" gutterBottom>\n        {children}{name}\n      </Typography>\n    </div>\n  )\n}\n\nexport default Label\n\nconst styles = {\n  label: css({\n    display: \"flex\",\n    \"align-items\": \"center\",\n    color: \"darkgray\",\n    padding: \"5px 0\",\n  }),\n  selected: css({\n    color: \"black\",\n  })\n}\n","import React, { FunctionComponent } from \"react\"\nimport { css } from \"emotion\"\nimport Typography from \"@material-ui/core/Typography\"\nimport InboxIcon from \"@material-ui/icons/Inbox\"\nimport SnoozeIcon from \"@material-ui/icons/Snooze\"\nimport LabelImportantIcon from \"@material-ui/icons/LabelImportant\"\nimport StarRateIcon from \"@material-ui/icons/StarRate\"\nimport SendIcon from \"@material-ui/icons/Send\"\nimport DraftsIcon from \"@material-ui/icons/Drafts\"\nimport ReportIcon from \"@material-ui/icons/Report\"\nimport DeleteIcon from \"@material-ui/icons/Delete\"\nimport LensIcon from \"@material-ui/icons/Lens\"\nimport Label from \"./Label\"\n\ninterface LabelPanelProps {\n  custom: string[],\n}\n\nconst LabelPanel: FunctionComponent<LabelPanelProps> = ({ custom }) => {\n  return (\n    <div className={styles.labelPanel}>\n      <Typography variant=\"h5\" gutterBottom>\n        Mail\n      </Typography>\n      <Label name=\"Inbox\" selected><InboxIcon style={styles.standardIcon} /></Label>\n      <Label name=\"Snoozed\"><SnoozeIcon style={styles.standardIcon} /></Label>\n      <Label name=\"Important\"><LabelImportantIcon style={styles.standardIcon} /></Label>\n      <Label name=\"Starred\"><StarRateIcon /></Label>\n      <Label name=\"Sent\"><SendIcon style={styles.standardIcon} /></Label>\n      <Label name=\"Drafts\"><DraftsIcon style={styles.standardIcon} /></Label>\n      <Label name=\"Spam\"><ReportIcon style={styles.standardIcon} /></Label>\n      <Label name=\"Trash\"><DeleteIcon style={styles.standardIcon} /></Label>\n      <div className={styles.buffer} />\n      <Typography variant=\"h5\">\n        Folders\n      </Typography>\n      {\n        custom.map((label, index) => {\n          return (\n          <div key={index} className={styles.label}>\n            <Typography variant=\"subtitle2\" gutterBottom>\n              <LensIcon style={{ height: \"10px\", color: \"red\" }} />{label}\n            </Typography>\n          </div>\n          )\n        })\n      }\n    </div>\n  )\n}\n\nexport default LabelPanel\n\nconst styles = {\n  labelPanel: css({\n    flex: \"0 0 200px\",\n    padding: \"20px 0\",\n    color: \"#585858\",\n  }),\n  label: css({\n    display: \"flex\",\n    \"align-items\": \"center\",\n    color: \"darkgray\",\n    padding: \"5px 0\",\n  }),\n  standardIcon: {\n    height: \"16px\"\n  },\n  buffer: css({\n    paddingTop: \"10px\",\n  })\n}","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport './App.css';\nimport 'typeface-roboto';\nimport { css } from \"emotion\";\nimport LabelPanel from \"./components/LabelPanel\"\n\nconst mockCustom = [\"Receipts\"]\n\nfunction App() {\n  return (\n    <div className={styles.app}>\n      <div className={styles.toolbar}>\n        <TextField id=\"standard-basic\" label=\"Search\" />\n      </div>\n      <div className={styles.panelContainer}>\n        <LabelPanel custom={mockCustom} />\n        <div className={styles.emailPanel}></div>\n        <div className={styles.previewPanel}></div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\nconst appBorder = \"2px solid #F4F4F4\"\n\nconst styles = {\n  app: css({\n\n  }),\n  toolbar: css({\n    height: \"80px\",\n    display: \"flex\",\n    \"align-items\": \"center\",\n    padding: \"0 30px 0\",\n    backgroundColor: \"#FCFCFA\",\n    border: appBorder,\n  }),\n  panelContainer: css({\n    height: \"calc(100vh - 80px)\",\n    display: \"flex\",\n    padding: \"0 30px 0\",\n  }),\n  emailPanel: css({\n    flex: \"0 400px\",\n    backgroundColor: \"#F9F9F8\",\n    borderLeft: \"1px solid #F4F4F4\"\n  }),\n  previewPanel: css({\n    flex: 1,\n    borderLeft: appBorder,\n  }),\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}